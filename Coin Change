class Solution {
public:
    // Time Complexity --> O(coinsLength * amount)
    // Space Complexity --> O(coinsLength * amount)
    int coinChange(vector<int>& coins, int amount) {
        if(coins.size()==0){
            return 0;
        }
        int columns = amount +1;
        int rows = coins.size() +1;
        vector<vector<int>> dp( rows , vector<int> (columns, 0));
        for(int i=1; i< columns; i++){
            dp[0][i] = amount+1;
        }
        for(int i = 1; i < rows; i++){
            for(int j = 1; j < columns; j++){
                if(j < coins[i-1]){
                    dp[i][j] = dp[i-1][j];
                }else{
                    dp[i][j] = min(dp[i-1][j], 1+dp[i][j-coins[i-1]]);
                }
            }
        }
        if(dp[coins.size()][amount] > amount){
            return -1;
        }
        return dp[coins.size()][amount];
    }
};
